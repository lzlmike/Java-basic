Constructor:
HashSet( )
This constructor constructs a default HashSet.

HashSet(Collection c)
This constructor initializes the hash set by using the elements of the collection c.

HashSet(int capacity)
This constructor initializes the capacity of the hash set to the given integer value capacity. The capacity grows automatically as elements are added to the HashSet.

HashSet(int capacity, float fillRatio)
This constructor initializes both the capacity and the fill ratio (also called load capacity) of the hash set from its arguments
Here the fill ratio must be between 0.0 and 1.0, and it determines how full the hash set can be before it is resized upward. Specifically, when the number of elements is greater than the capacity of the hash set multiplied by its fill ratio, the hash set is expanded

Method:
boolean add(Object o)
Adds the specified element to this set if it is not already present.

void clear()
Removes all of the elements from this set.

Object clone()
Returns a shallow copy of this HashSet instance: the elements themselves are not cloned.

boolean contains(Object o)
Returns true if this set contains the specified element

boolean isEmpty()
Returns true if this set contains no elements.

Iterator iterator()
Returns an iterator over the elements in this set.

boolean remove(Object o)
Removes the specified element from this set if it is present.

int size()
Returns the number of elements in this set (its cardinality).

Example:

import java.util.*;

public class HashSetDemo {

   public static void main(String args[]) {
      // create a hash set
      HashSet hs = new HashSet();
      // add elements to the hash set
      hs.add("B");
      hs.add("A");
      hs.add("D");
      hs.add("E");
      hs.add("C");
      hs.add("F");
      System.out.println(hs);
   }
}


related problem:
/java lintcode/ LongestConsecutiveSequence;
